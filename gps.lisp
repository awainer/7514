(setq grafo '(
              (1 (2))
              (2 (3 8))
              (3 (4))
              (4 (5 10))
              (5 (6))
              (6 nil)
              (7 (1 8))
              (8 (9 14))
              (9 (3 10))
              (10 (11 16))
              (11 (12 5 17))
              (12 (6))
              (13 (7))
              (14 (13 20))
              (15 (9 14))
              (16 (15 22))
              (17 (16 11 23))
              (18 (17 12))
              (19 (13 20))
              (20 (21 25))
              (21 (15 22))
              (22 (28 23))
              (23 (24 17 29))
              (24 (18))
              (25 (19))
              (26 (25))
              (27 (21 26))
              (28 (27))
              (29 (28 23))
              (30 (24 29))

             )
)

(defun belongs (x l)
  (cond
    ((null l      ) nil)
    ((eq x (car l))   t)
    (t      (belongs x (cdr l)))
  ) 
)

(trace belongs)

(defun vecinos (nodo grafo &optional (res nil) ) 
    (if (null grafo)
        res
        (if (belongs nodo (cadar grafo))
            (vecinos nodo (cdr grafo) (cons (caar grafo) res))
            (vecinos nodo (cdr grafo)   res)
        )
    )
)
            
(trace vecinos)
(print (vecinos 10 grafo))

(defun diferencia nil
)

(defun gps (i f grafo &optional (tray (list (list i))))
    (if (null tray)
      nil
      (if (eq (caar tray) f)
        (reverse tray)
        (gps i f grafo
             (append
               (mapcar (lambda (x) (cons x (car tray))))
               (diferencia  (vecinos    (caar tray) grafo)
                            (car tray)
                            )
             )
        )
     )
   )
)
